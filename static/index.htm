<html>

<head>
  <title>INFO 4310 - HW3</title>
  <link href="./style.css" rel="stylesheet" type="text/css">

  <script src="https://d3js.org/d3.v7.min.js"></script>
  <script src="https://d3js.org/topojson.v3.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/d3-tile@1"></script>

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link
    href="https://fonts.googleapis.com/css2?family=Barlow:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap"
    rel="stylesheet">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">

</head>

<body>

  <div class="flex-container">

    <!--  ---------------
              FILTERS 
          --------------- -->
    <div class="filterColumn">
      <h1><img src="logo.png" width="35"> Foodie<span style="font-weight:400;">Fix</span></h1>
      <p id="tagline">Find the best restaurants near me</p>

      <h2>FILTERS</h2>

      <div class="filterButtonContainer">

        <!-- RATING FILTER-->
        <h3>RATING</h3>
        <svg id="histogram" width="300" height="115"></svg>

        <!-- DISTANCE FILTER-->
        <h3 class="withRule">DISTANCE</h3>
        <div id="distance">
          <button id="mi1_4">.25 mi</button>
          <button id="mi1_2">.5 mi</button>
          <button id="mi1">1 mi</button>
        </div>

        <!-- CATEGORY FILTER-->
        <h3 class="withRule">CATEGORY</h3>
        <button id="selectAllButton" value="selectAll">SELECT ALL</button>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;<button
          id="resetButton" value="reset">CLEAR ALL</button>

        <div id="category">
          <button id="c01" value="restaurants">restaurants</button>
          <button id="c02" value="cafes">cafes</button>
          <button id="c03" value="coffee">coffee</button>
          <button id="c04" value="sandwiches">sandwiches</button>
          <button id="c05" value="sushi">sushi</button>
          <button id="c06" value="pizza">pizza</button>
          <button id="c07" value="donuts">donuts</button>
          <button id="c08" value="bakeries">bakeries</button>
          <button id="c09" value="ethnicmarkets">ethnic</button>
          <button id="c10" value="newamerican">american</button>
          <button id="c11" value="chinese">chinese</button>
          <button id="c12" value="french">french</button>
          <button id="c13" value="indpak">indpak</button>
          <button id="c14" value="italian">italian</button>
          <button id="c15" value="japanese">japanese</button>
          <button id="c16" value="mexican">mexican</button>
          <button id="c17" value="thai">thai</button>
          <button id="c18" value="vietnamese">vietnamese</button>
        </div>

      </div>
    </div>

    <!--  ---------------
                LIST 
          --------------- -->
    <div id="restaurantInfoBox" class="restaurant-list-info">
      <h2>RESTAURANTS NEAR ME</h2>
      <h3 id="best">FoodieFix Picks</h3>
      <div id="restaurantList" class="restaurant-list"></div>
    </div>

    <!--  ---------------
                MAP 
          --------------- -->
    <div class="mapColumn">
      <div id="restaurant-hover" class="restaurant-hover" style="position:absolute"></div>
      <svg id="svgMap" width="650" height="1100" top="30">
      </svg>
    </div>

  </div>



  <!-- ==================
        MAP SCRIPT
    =================== -->
  <script id="map">
    const svgMap = d3.select("#svgMap");
    const width = svgMap.attr("width");
    const height = svgMap.attr("height");
    const deltas = [-100, -4, -1, 0];

    let url = (x, y, z) =>
      `https://api.mapbox.com/styles/v1/desaiwang/ckttxzrvq0s4i18l4he5vtltt/tiles/${z}/${x}/${y}${devicePixelRatio > 1 ? "@2x" : ""}?access_token=pk.eyJ1IjoiZGVzYWl3YW5nIiwiYSI6ImNrc2puMHIyaTJmbWsydG41bmljMWExdjIifQ.A4w7M2K7sSIN-uLuXarl_w`

    //set up colors 
    const selectedColor = "#7339D0";
    const greyedoutColor = "#A5A0AC";

    const requestMapData = async () => {

      let latdiff_1mile = 57.296 / 3963;
      let curr_latdiff = 0;
      let filter_dist = Infinity;

      //eatery data
      // let eateriesAll = await d3.csv("./yelp_boston.csv", d3.autoType);
      let eateriesAll = await d3.csv("./yelp_boston_clean.csv", d3.autoType);

      //parse search categories into proper list
      eateriesAll.forEach((d) => {
        // Remove the surrounding single quotes and convert the string into valid JSON
        d["search category"] = JSON.parse(d["search category"].replace(/'/g, '"'));
      }
      );

      // console.log(eateriesAll);

      //sort by rating and reviews, this is the order of display for list view
      eateriesAll = eateriesAll.sort((a, b) => {

        // Sort by rating descending
        if (a.rating !== b.rating) {
          return b.rating - a.rating;
        }

        // If ratings are the same, sort by review count descending
        return b.review_count - a.review_count;
      });

      let eateries = eateriesAll; //this is used for filtering
      //filters that's placed on eateriesAll for current View
      var filters = {};

      //set up histogram

      const marginHist = ({ top: 5, right: 20, bottom: 10, left: 0 })
      const widthHist = 275;
      const heightHist = 100;
      let bins = d3.bin().thresholds([3, 3.5, 4, 4.5, 5]).value(d => d.rating)(eateriesAll);
      // console.log("bins", bins);
      let barPadding = 8;
      let svgHist = d3.select("#histogram");

      let xScale = d3
        .scaleLinear()
        .domain([bins[0].x0, bins[bins.length - 1].x1 + 0.5])
        .range([marginHist.left, widthHist - marginHist.right])

      let x = d3.scaleBand()
        .domain([3.5, 4.0, 4.5, 5.0])
        .range([marginHist.left - barPadding * 1.5, widthHist - marginHist.right + barPadding * 2])
        .padding(0.3) //TODO: maybe set this instead of multiplying in Padding

      let yScale = d3
        .scaleSymlog()
        .domain([0, d3.max(bins, d => d.length)])
        .nice()
        .range([heightHist - marginHist.bottom, marginHist.top])

      let xAxis = (g) => {
        g
          .attr("transform", `translate(${0},${heightHist - marginHist.bottom})`)
          .call(
            d3.axisBottom(x)
              .ticks(0)
              .tickSizeOuter(0)
              .tickFormat(d3.format(".1f"))
          )
      };

      let ratinglist = []; //used to update ratings

      let histBars = svgHist
        .selectAll("rect")
        .data(bins)
        .join("rect")
        .attr("x", d => xScale(d.x0) + barPadding) // position of each bar on xAxis, width adjustment (bar padding)
        .attr("y", d => yScale(d.length))
        .attr("width", d => d3.max([0, xScale(4.5) - xScale(4) - barPadding]))
        .attr("height", d => yScale(0) - yScale(d.length))
        .style("border-radius", "1px")
        .style("outline", "solid")
        .style("outline-width", "thin")
        .style("outline-color", greyedoutColor)
        .style("outline-width", "thin")
        .attr("fill", "white")
        .attr("cursor", "pointer")
        .on('mouseover', function (event, d) {
          // console.log(event, d)
          if (!d.clicked) {
            d3.select(this).attr("fill", "white").style("outline-width", "medium")
            //d3.select(this).style('outline-color', greyedoutColor);
          }
          else {
            d3.select(this).attr("fill", "#EFE9F8").style("outline-width", "medium")
            //d3.select(this).style('outline-color', selectedColor);            
          }
        })
        .on('mouseout', function (event, d) {
          if (!d.clicked) {
            d3.select(this).attr("fill", "white").style("outline-width", "thin")
            d3.select(this).style('outline-color', greyedoutColor)
            //.attr('style', 'outline: thin solid clear;');
          }
          else {
            d3.select(this).attr("fill", "#EFE9F8").style("outline-width", "thin")
            d3.select(this).style('outline-color', selectedColor);
          }
        })
        .on('click', function (event, d) {
          d.clicked = !d.clicked

          if (d.clicked) {
            d3.select(this).attr("fill", "#EFE9F8")
            d3.select(this).style('outline-color', selectedColor);

            ratinglist.push(d.x0);
            updateData();
          } else {
            d3.select(this).attr("fill", "white")
            d3.select(this).style('outline-color', greyedoutColor)

            ratinglist = ratinglist.filter(rating => rating != d.x0)
            updateData();
          }
        });

      svgHist.append("g").call(xAxis);

      let eateriesInRadius = eateriesAll; //this is used for best of best list


      // -----------------------
      // CATEGORY FILTER BUTTONS
      // -----------------------

      // array for user selection results
      let category_filter = [];

      // button labels via id
      let category_labels = ['c01', 'c02', 'c03', 'c04', 'c05', 'c06', 'c07', 'c08', 'c09',
        'c10', 'c11', 'c12', 'c13', 'c14', 'c15', 'c16', 'c17', 'c18',];

      // SELECTING/DESELECTING CATEGORY BUTTONS ONE AT A TIME
      // loop through category label id's
      category_labels.forEach(categoryLoop);
      // run for EACH category id
      function categoryLoop(category_id) {
        // identify the individual button (ex. restaurants, cafes, etc...)
        let category_button = document.getElementById(category_id);
        // Listen for the button click
        category_button.addEventListener('click', () => {
          category_button.classList.toggle('clicked'); // toggle highlights for button
          if (category_button.classList.contains('clicked')) { // If the button is clicked...
            category_filter.push(category_button.value); // add the button value to our new array            
          } else { // Otherwise user unselected the button
            category_filter = category_filter.filter(item => item != category_button.value); // remove the button value from the array
          }

          updateData();
        });
      };

      // SELECT ALL BUTTONS (empty the category_filter array first)
      // Get the SELECT ALL button
      let selectAllButton = document.getElementById('selectAllButton');

      // Add an event listener to the SELECT ALL button
      selectAllButton.addEventListener('click', () => {
        // Empty the category_filter array
        category_filter = [];

        // Iterate through all category labels and trigger a click event on each button
        category_labels.forEach(category_id => {
          let category_button = document.getElementById(category_id);
          category_button.classList.add('clicked'); // Add the 'clicked' class
          category_filter.push(category_button.value); // Add the button value to the array
        });
        updateData();

      });

      // RESET BUTTON
      // Get the RESET button
      let resetButton = document.getElementById('resetButton');

      // Add an event listener to the RESET button
      resetButton.addEventListener('click', () => {
        // Iterate through all category labels and remove the 'clicked' class from each button
        category_labels.forEach(category_id => {
          let category_button = document.getElementById(category_id);
          category_button.classList.remove('clicked'); // Remove the 'clicked' class
        }
        );

        category_filter = [];
        updateData();
      });

      // cRestaurant.addEventListener('click', () => {
      //   cRestaurant.classList.toggle('clicked'); 
      //   cRestaurant_toggle = !cRestaurant_toggle;

      //   // User selected restaurants
      //   if(cRestaurant_toggle){
      //     // add element
      //     category_filter.push('restaurants');

      //     // show proof
      //     console.log(category_filter);

      //     // User un-selected restaurants
      //   } else {
      //     // remove element
      //     category_filter = category_filter.filter(item => item != 'restaurants');

      //     // show proof
      //     console.log(category_filter);
      //   }
      // });



      // -----------------------
      // DISTANCE FILTER BUTTONS
      // -----------------------
      const mi1 = document.getElementById('mi1');
      const mi1_2 = document.getElementById('mi1_2');
      const mi1_4 = document.getElementById('mi1_4');

      let mi1_toggle = false;
      let mi1_2_toggle = false;
      let mi1_4_toggle = false;

      // click button, unclick other buttons
      mi1.addEventListener('click', () => {
        mi1.classList.toggle('clicked');
        mi1_toggle = !mi1_toggle;

        mi1_2_toggle = false;
        mi1_4_toggle = false;

        update_dist();
      });

      mi1_2.addEventListener('click', () => {
        mi1_2.classList.toggle('clicked');
        mi1_toggle = false;
        mi1_2_toggle = !mi1_2_toggle;
        mi1_4_toggle = false;

        update_dist();
      });
      mi1_4.addEventListener('click', () => {
        mi1_4.classList.toggle('clicked');
        mi1_toggle = false;
        mi1_2_toggle = false;
        mi1_4_toggle = !mi1_4_toggle;

        update_dist();
      });

      // set distance
      function update_dist() {
        if (!mi1_toggle) {
          mi1.classList.remove('clicked');
        } else {
          curr_latdiff = latdiff_1mile
          filter_dist = 1;
        }

        if (!mi1_2_toggle) {
          mi1_2.classList.remove('clicked');
        } else {
          curr_latdiff = latdiff_1mile / 2
          filter_dist = 0.5;
        }

        if (!mi1_4_toggle) {
          mi1_4.classList.remove('clicked');
        } else {
          curr_latdiff = latdiff_1mile / 4
          filter_dist = 0.25;
        }

        if (!mi1_4_toggle && !mi1_2_toggle && !mi1_toggle) {
          curr_latdiff = 0
          filter_dist = Infinity;
        }
        updateMyLocation();
      }

      // MAP
      const projection = d3.geoMercator()
        .scale(1 / (2 * Math.PI))
        .translate([0, 0]);


      const render = d3.geoPath(projection);

      const tile = d3.tile()
        .extent([[0, 0], [width, height]])
        .tileSize(512)
        .clampX(false);

      const levels = svgMap.append("g")
        // .style('clip-path', "url(#circleClip)") //this clips the map to a circle
        .attr("pointer-events", "none")
        .selectAll("g")
        .data(deltas)
        .join("g")
        .style("opacity", null); //set to 0.3 to see low resolution files

      //myLocation
      let myCoordinates = {
        latitude: 42.36541856,
        longitude: -71.05688332
      };



      let radiusBuffer = svgMap.append("circle")
        .attr("r", 15)
        .attr("fill", "#BD9DF0")
        .attr("opacity", 0.4)
        .attr("transform", `translate(${projection([myCoordinates.longitude, myCoordinates.latitude])})`);

      //Mouseover interaction
      let tooltipWidth = 250;
      let tooltipHeight = 45;

      let tooltip = svgMap.append("g")
        .attr("class", "tooltip")
        .attr("transform", `translate(${20},20)`)
        .attr("visibility", "hidden");

      let box = tooltip.append("rect")
        .attr("fill", "white")
        .attr("opacity", 0.8)
        .attr("x", 0)
        .attr("y", 0)
        .attr("height", tooltipHeight);

      let txt = tooltip.append("text")
        .attr("fill", "black")
        // .attr("text-anchor", "middle")
        .attr("alignment-baseline", "hanging")
        .attr("x", 10)
        .attr("y", 5);
      let txt2 = tooltip.append("text")
        .attr("fill", "black")
        // .attr("text-anchor", "middle")
        .attr("alignment-baseline", "hanging")
        .attr("x", 10)
        .attr("y", 25);

      // let test = tooltip.append("g").attr("id", "stars");

      let svgEateries = svgMap.append("g");
      let svgFoodiePicks = svgMap.append("g");

      let myLocation = svgMap.selectAll("g.me").data([myCoordinates])
        .join("g")
        .append("image")
        .attr('width', 25)
        .attr('height', 25)
        .attr("xlink:href", './my_location_filled.png')
        .attr("fill", "red")
        .attr("preserveAspectRatio", "xMidYMid meet")
        .attr("x", -12.5)  // Adjust x position to center the image
        .attr("y", -12.5)// Adjust y position to center the image
        .attr("transform", (d) => `translate(${projection([d.longitude, d.latitude])})`)
        .call(d3.drag()
          // .on("start", (event, d) => console.log("drag start"))
          .on("drag", (event, d) => {

            newCoords = projection.invert([event.x, event.y]);
            d.longitude = newCoords[0];
            d.latitude = newCoords[1];
            [myCoordinates.longitude, myCoordinates.latitude] = newCoords;
            updateMyLocation();

          })
          // .on("end", (event, d) => console.log("drag end"))
          // .on("start.update drag.update end.update", console.log("update"))
        );

      //updates myLocation, radiusBuffer, and eatery color


      function updateMyLocation() {
        // console.log("distance: ", getDistanceFromLatLonInMiles(myCoordinates.latitude, myCoordinates.longitude, myCoordinates.latitude + latdiff_1mile * 3, myCoordinates.longitude))

        let screen_myLocation = projection([myCoordinates.longitude, myCoordinates.latitude]);
        let screen_radiusEnd = projection([myCoordinates.longitude, myCoordinates.latitude + curr_latdiff]);
        let radius = screen_myLocation[1] - screen_radiusEnd[1];
        // console.log("mypt:", screen_myLocation)
        // console.log("1mile pt:", screen_radiusEnd)
        // console.log("dist radius", radius)

        myLocation.attr("transform", (d) => `translate(${projection([d.longitude, d.latitude])})`);
        radiusBuffer
          .attr("r", radius)
          .attr("transform", (d) => `translate(${projection([myCoordinates.longitude, myCoordinates.latitude])})`);

        updateData();

      }
      var zoom = d3.zoom()
        .scaleExtent([1 << 18.5, 1 << 26])
        .on("zoom", ({ transform }) => zoomed(transform));

      svgMap
        .call(zoom)
        .call(zoom.transform, d3.zoomIdentity
          .translate(width / 2, height / 2)
          .scale(- 1 << 22)
          .translate(...projection([myCoordinates.longitude, myCoordinates.latitude]))
          .scale(-1)
        )
        .on("mousewheel.zoom", null)
        .on("DOMMouseScroll.zoom", null); //disable scrolling while zooming


      function zoomed(transform) {
        // console.log("regular projection", projection([42.36541856, -71.05688332]))

        levels.each(function (delta) {
          const tiles = tile.zoomDelta(delta)(transform);

          d3.select(this)
            .selectAll("image")
            .data(tiles, d => d)
            .join("image")
            .attr("xlink:href", d => url(...d3.tileWrap(d)))
            .attr("x", ([x]) => (x + tiles.translate[0]) * tiles.scale)
            .attr("y", ([, y]) => (y + tiles.translate[1]) * tiles.scale)
            .attr("width", tiles.scale)
            .attr("height", tiles.scale);
        });


        projection
          .scale(transform.k / (2 * Math.PI))
          .translate([transform.x, transform.y]);

        updateMyLocation();
      };


      function pointPassesFilters(point) {

        let stillPassed = true;

        Object.values(filters).forEach(filterFunc => {

          stillPassed = filterFunc(point) && stillPassed;

        });

        return stillPassed;

      }

      //calls update on filters
      function updateData() {

        //update filterRating
        let filterRating = d => ratinglist.includes(d['rating']);
        filters['rating'] = filterRating;

        let filterCategory = d => {
          for (let value of d['search category']) {
            if (category_filter.includes(value)) {
              return true;
            }
          }
          return false;
        };

        filters['search category'] = filterCategory;

        // Filter the points using the filter dictionary first
        eateries = eateriesAll.filter(d => pointPassesFilters(d));
        // console.log('filtered eateries', eateries);


        // Draw the circles
        svgEateries.selectAll("circle.eateries").data(eateries)
          .join("circle")
          .attr("class", "eateries")
          .attr("fill", (d) => {
            d.dist = getDistanceFromLatLonInMiles(myCoordinates.latitude, myCoordinates.longitude, d.latitude, d.longitude);
            d.inside = d.dist < filter_dist
            if (d.inside) {
              return selectedColor
            }
            else { return greyedoutColor }
          })
          .attr("r", 5)
          .style("stroke", "white")
          .attr("stroke-width", (d) => {
            if (d.inside) { return "2px" }
          })
          .attr("opacity", 0.9)
          .attr("transform", (d) => `translate(${projection([d.longitude, d.latitude])})`)
          .on("mouseover", (e, d) => {
            // console.log("normal")
            updateRestaurantHover([d], e.offsetX, e.offsetY, false)

          })
          .on("mouseout", (event) => {
            d3
              .select('#restaurant-hover')
              .selectAll("*").remove();
          });


        eateriesInRadius = eateries.filter(d => d.dist < filter_dist);
        // console.log("updating eateriesInRadius", eateriesInRadius);
        updateRestaurantInfoBox(eateriesInRadius);


        //updating stars on map
        svgFoodiePicks.selectAll("image")
          .data(eateriesInRadius.slice(0, 5)) //top 5 entires
          .join("image")
          .attr("class", "star-marker")
          .attr("xlink:href", "./star_pink.png")
          .attr("x", -10)
          .attr("y", -10)
          .attr("transform", d => `translate(${projection([d.longitude, d.latitude])})`)
          .attr("width", 20) // Adjust the width as needed
          .attr("height", 20) // Adjust the height as needed
          .on("mouseover", (e, d) => {
            // console.log("best of best!")
            updateRestaurantHover([d], e.offsetX, e.offsetY, true)

          })
          .on("mouseout", (event) => {
            d3
              .select('#restaurant-hover')
              .selectAll("*").remove();
          });


        histBars
          .attr("height", (d) => {

            passedfilter = (d.filter(data => filterCategory(data))); //the height reflects only categories
            d.filteredlength = passedfilter.length;
            return yScale(0) - yScale(Math.max(1, d.filteredlength)) //min is 1 to ensure that bar doesn't disappear
          })
          .attr("y", d => yScale(Math.max(1, d.filteredlength)));

      }

      //dispatch some simulated click events so histograms are clicked upon web launch
      histBars.each(function () {
        let e = new MouseEvent('click', {
          bubbles: true,
          cancelable: true,
          view: window
        });
        this.dispatchEvent(e);
      })

      //same with mile1 button and all categories
      mi1.click();
      selectAllButton.click();
      updateData();

    }

    requestMapData();

    // ---------------
    // HELPER FUNCTIONS
    // ---------------

    //makes sure element shows up withinbounds
    function elementLocation(mouseX, mouseY, elementWidth, elementHeight, boundaryX, xMargin, yMargin) {

      let xPos = mouseX + xMargin;
      let yPos = mouseY - yMargin - elementHeight;

      if ((xPos + elementWidth) > boundaryX) {
        xPos = mouseX - xMargin - elementWidth
      }
      if (yPos < 0) {
        yPos = mouseY - yMargin
      }

      return { x: xPos, y: yPos };

    }


    function getDistanceFromLatLonInMiles(lat1, lon1, lat2, lon2) {
      var R = 3963; // Radius of the earth in miles
      var dLat = deg2rad(lat2 - lat1);
      var dLon = deg2rad(lon2 - lon1);
      var a =
        Math.sin(dLat / 2) * Math.sin(dLat / 2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) *
        Math.sin(dLon / 2) * Math.sin(dLon / 2)
        ;
      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
      var d = R * c;
      return d;
    }

    function deg2rad(deg) {
      return deg * (Math.PI / 180)
    }


    // Number of stars to create
    const numStars = 5;

    // Function to create a star element
    /* testing star generation */
    /* adapted from: https://jsfiddle.net/Auqj8/1/ */

    function createStar(isFilled, isHalf) {
      const star = document.createElement('span');
      star.classList.add('star');
      if (isFilled) {
        star.classList.add('on');
      }
      if (isHalf) {
        star.classList.add('half');
      }

      return star;
    }

    // Function to generate stars, can take either purple or pink as color
    function generateStars(data, color) {

      let rating = data.rating;

      let div = document.createElement("div");

      // Clear previous stars
      div.innerHTML = '';

      // Calculate full stars
      const fullStars = Math.floor(rating);

      // Calculate half star
      const hasHalfStar = rating % 1 !== 0;

      // Generate full stars
      for (let i = 0; i < fullStars; i++) {
        // const star = createStar(true, false);
        // div.appendChild(star);

        const star = document.createElement('span')
        star.className = (`fa fa-star checked ${color}`);
        div.appendChild(star);

      }

      // Generate half star
      if (hasHalfStar) {
        // const halfStar = createStar(false, true);
        // div.appendChild(halfStar);

        const star = document.createElement('span')
        star.className = (`fa fa-star-half-full ${color}`);
        div.appendChild(star);
      }

      // Generate empty stars
      const emptyStars = numStars - fullStars - (hasHalfStar ? 1 : 0);
      for (let i = 0; i < emptyStars; i++) {
        // const star = createStar(false, false);
        // div.appendChild(star);

        const star = document.createElement('span')
        star.className = (`fa fa-star-o ${color}`);
        div.appendChild(star);
      }

      let p = document.createElement("p");
      p.textContent = ` (${data.review_count} reviews)`;
      p.style.display = "inline"; // Set display to inline
      p.style.color = "#555"
      div.appendChild(p);

      return div;
    }

    // ---------------
    // RESTAURANT CARD
    // ---------------
    function updateRestaurantInfoBox(eateries) {

      const restaurantListDiv = d3.select('#restaurantList');
      restaurantListDiv.selectAll("*").remove();

      if (eateries.length == 0) {
        restaurantListDiv
          .append('div')
          .attr('class', 'restaurant-card')
          .append('p')
          .text("Nothing meets your criteria. Try increasing distance or changing filtered categories.")
      } else {
        // Bind data to restaurant cards
        const restaurantCards = restaurantListDiv.selectAll('.restaurant-card')
          .data(eateries.slice(0, 5)); // Limit to first 5 restaurants

        // Enter selection - create new elements for restaurants
        const newRestaurantCards = restaurantCards.enter()
          .append('div')
          .attr('class', 'restaurant-card');

        const anchorTags = newRestaurantCards
          .style('color', 'inherit')
          .style('text-decoration', 'none');

        // Append individual spans for each search category within a div
        anchorTags.each(function (d) {
          d3.select(this)
            .append('a')
            .attr('href', d => d.url) // Set href attribute to the restaurant's URL
            .attr('target', '_blank') // Open link in a new tab
            .append('p')
            .attr('class', 'restaurant-name')
            .text(d => d.name);

          d3.select(this)
            .append('div')
            .node()
            .appendChild(generateStars(d, 'pink'));

          const categories = d['search category'];
          // console.log(categories);
          //JSON.parse(d.categories_json);

          // Append a div to contain individual spans for each search category
          const categoryDiv = d3.select(this)
            .append('div')
            .attr('class', 'categoryDivStyle');

          // Append individual spans for each search category within the div
          const categorySpans = categoryDiv.selectAll('.categorySpan') // Assuming you want to use a class for styling
            .data(categories)
            .enter()
            .append('span')
            .attr('class', 'categoryStyle') // Use appropriate class for styling
            .text(category => category);

          const locationInfo = JSON.parse(d.location_json);
          d3.select(this)
            .append('p')
            .text(`${locationInfo.display_address.join(', ')}`);

          d3.select(this)
            .append('p')
            .attr('class', 'snippetStyle')
            .text(d => `"${d.snippet_text}"`);
        });

        // Update existing restaurant cards
        restaurantCards.select('a')
          .attr('href', d => d.url);

        // Remove excess restaurant cards
        restaurantCards.exit().remove();
      }
    }


    function updateRestaurantHover(eateries, mouseX, mouseY, isBest) {

      let restaurantListDiv = d3
        .select('#restaurant-hover');


      restaurantListDiv.selectAll("*").remove();

      let cardClass = isBest ? 'best-restaurant-card-hover' : 'restaurant-card-hover';
      let color = isBest ? 'pink' : 'purple';

      // Bind data to restaurant cards
      const newRestaurantCards = restaurantListDiv.selectAll('div')
        .data(eateries)
        .enter()
        .append('div')
        .attr('class', cardClass);

      const anchorTags = newRestaurantCards
        .style('text-decoration', 'none');

      // Append individual spans for each search category within a div
      anchorTags.each(function (d) {
        d3.select(this)
          .append('p')
          .attr('class', 'restaurant-name')
          .text(d => d.name);

        d3.select(this)
          .append('div')
          .node()
          .appendChild(generateStars(d, color));

        const categories = d['search category'];

        // Append a div to contain individual spans for each search category
        const categoryDiv = d3.select(this)
          .append('div')
          .attr('class', 'categoryDivStyle');

        // Append individual spans for each search category within the div
        const categorySpans = categoryDiv.selectAll('.categorySpan') // Assuming you want to use a class for styling
          .data(categories)
          .enter()
          .append('span')
          .attr('class', 'categoryStyle') // Use appropriate class for styling
          .text(category => category);

      });

      // console.log("width", anchorTags.node().offsetWidth)
      // console.log("height", anchorTags.node().offsetHeight)
      loc = elementLocation(mouseX, mouseY, anchorTags.node().offsetWidth, anchorTags.node().offsetHeight, width, 10, 10)

      restaurantListDiv.style("transform", `translate(${loc.x}px, ${loc.y}px)`);
    }

  </script>

</body>